User requirement: Perform a 3D Bernard Cell simulation using OpenFOAM buoyantFoam solver. The computational domain spans 9 m x 1 m x 2 m. The simulation begins at t=0 seconds and runs until t=1000 seconds with a time step of 1 second, and results are written at intervals of every 50 seconds. One wall has a temperature of 301 K, while the other has a temperature of 300 K.
Refer to the following similar case file content to ensure the generated file aligns with the user requirement:
<similar_case_reference><index>
case name: BernardCells
case domain: heatTransfer
case category: None
case solver: buoyantFoam
</index>


<directory_structure>
<dir>directory name: 0. File names in this directory: [k, epsilon, nut, U, alphat, p, p_rgh, T]</dir>
<dir>directory name: system. File names in this directory: [fvSolution, blockMeshDict, fvSchemes, controlDict]</dir>
<dir>directory name: constant. File names in this directory: [momentumTransport, physicalProperties, g]</dir>
</directory_structure>


<tutorials>
<directory_begin>directory name: 0
<file_begin>file name: k
<file_content>
FoamFile
{
    format      ascii;
    class       volScalarField;
    object      k;
}


dimensions      [0 2 -2 0 0 0 0];

internalField   uniform 1e-5;

boundaryField
{
    wall
    {
        type            kqRWallFunction;
        value           $internalField;
    }

    #includeEtc "caseDicts/setConstraintTypes"
}



</file_content>
</file_end>

<file_begin>file name: epsilon
<file_content>
FoamFile
{
    format      ascii;
    class       volScalarField;
    object      epsilon;
}


dimensions      [0 2 -3 0 0 0 0];

internalField   uniform 1e-5;

boundaryField
{
    wall
    {
        type            epsilonWallFunction;
        value           $internalField;
    }

    #includeEtc "caseDicts/setConstraintTypes"
}



</file_content>
</file_end>

<file_begin>file name: nut
<file_content>
FoamFile
{
    format      ascii;
    class       volScalarField;
    object      nut;
}


dimensions      [0 2 -1 0 0 0 0];

internalField   uniform 0;

boundaryField
{
    wall
    {
        type            nutkWallFunction;
        value           $internalField;
    }

    #includeEtc "caseDicts/setConstraintTypes"
}



</file_content>
</file_end>

<file_begin>file name: U
<file_content>
FoamFile
{
    format      ascii;
    class       volVectorField;
    object      U;
}


dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (1e-4 0 0);

boundaryField
{
    wall
    {
        type            noSlip;
    }

    #includeEtc "caseDicts/setConstraintTypes"
}


</file_content>
</file_end>

<file_begin>file name: alphat
<file_content>
FoamFile
{
    format      ascii;
    class       volScalarField;
    object      alphat;
}


dimensions      [1 -1 -1 0 0 0 0];

internalField   uniform 0;

boundaryField
{
    wall
    {
        type            compressible::alphatJayatillekeWallFunction;
        Prt             0.85;
        value           $internalField;
    }

    #includeEtc "caseDicts/setConstraintTypes"
}



</file_content>
</file_end>

<file_begin>file name: p
<file_content>
FoamFile
{
    format      ascii;
    class       volScalarField;
    object      p;
}


dimensions      [1 -1 -2 0 0 0 0];

internalField   uniform 0;

boundaryField
{
    wall
    {
        type            calculated;
        value           $internalField;
    }

    #includeEtc "caseDicts/setConstraintTypes"
}


</file_content>
</file_end>

<file_begin>file name: p_rgh
<file_content>
FoamFile
{
    format      ascii;
    class       volScalarField;
    object      p_rgh;
}


dimensions      [1 -1 -2 0 0 0 0];

internalField   uniform 0;

boundaryField
{
    wall
    {
        type            fixedFluxPressure;
        value           $internalField;
    }

    #includeEtc "caseDicts/setConstraintTypes"
}


</file_content>
</file_end>

<file_begin>file name: T
<file_content>
FoamFile
{
    format      ascii;
    class       volScalarField;
    object      T;
}


dimensions      [0 0 0 1 0 0 0];

internalField   uniform 300;

boundaryField
{
    floor
    {
        type            fixedValue;
        value           uniform 301;
    }
    ceiling
    {
        type            fixedValue;
        value           uniform 300;
    }
    sideWalls
    {
        type            zeroGradient;
    }

    #includeEtc "caseDicts/setConstraintTypes"
}


</file_content>
</file_end>

</directory_end>

<directory_begin>directory name: system
<file_begin>file name: fvSolution
<file_content>
FoamFile
{
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSolution;
}


solvers
{
    "rho.*"
    {
        solver          diagonal;
    }

    p_rgh
    {
        solver          GAMG;
        smoother        DIC;
        tolerance       1e-8;
        relTol          0.01;
    }

    p_rghFinal
    {
        $p_rgh;
        relTol          0;
    }

    "(U|e|k|epsilon)"
    {
        solver          PBiCGStab;
        preconditioner  DILU;
        tolerance       1e-8;
        relTol          0.01;
    }

    "(U|e|k|epsilon)Final"
    {
        $U;
        relTol          0;
    }

}

PIMPLE
{
    momentumPredictor no;
    nNonOrthogonalCorrectors 0;
    nCorrectors       2;

    pRefCell          0;
    pRefValue         0;
}

relaxationFactors
{
    equations
    {
        ".*"   1.0;
    }
}



</file_content>
</file_end>

<file_begin>file name: blockMeshDict
<file_content>
FoamFile
{
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}


convertToMeters 1;

vertices
(
    (0 0 -1)
    (9 0 -1)
    (9 1 -1)
    (0 1 -1)
    (0 0 1)
    (9 0 1)
    (9 1 1)
    (0 1 1)
);

blocks
(
    hex (0 1 2 3 4 5 6 7) (90 10 1) simpleGrading (1 1 1)
);

boundary
(
    floor
    {
        type wall;
        faces
        (
            (1 5 4 0)
        );
    }

    ceiling
    {
        type wall;
        faces
        (
            (3 7 6 2)
        );
    }

    sideWalls
    {
        type wall;
        faces
        (
            (0 4 7 3)
            (2 6 5 1)
        );
    }

    frontAndBack
    {
        type empty;
        faces
        (
            (0 3 2 1)
            (4 5 6 7)
        );
    }
);



</file_content>
</file_end>

<file_begin>file name: fvSchemes
<file_content>
FoamFile
{
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}


ddtSchemes
{
    default         Euler;
}

gradSchemes
{
    default         Gauss linear;
}

divSchemes
{
    default             none;

    div(phi,U)          Gauss linearUpwind grad(U);
    div(phi,e)          Gauss limitedLinear 1;

    turbulence          Gauss limitedLinear 1;
    div(phi,k)          $turbulence;
    div(phi,epsilon)    $turbulence;

    div(phi,(p|rho))    Gauss limitedLinear 1;
    div(phi,K)          Gauss linear;

    div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;
}

laplacianSchemes
{
    default         Gauss linear corrected;
}

interpolationSchemes
{
    default         linear;
}

snGradSchemes
{
    default         corrected;
}



</file_content>
</file_end>

<file_begin>file name: controlDict
<file_content>
FoamFile
{
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}


application     buoyantFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         1000;

deltaT          1;

writeControl    runTime;

writeInterval   50;

purgeWrite      0;

writeFormat     binary;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;

functions
{
    #includeFunc residuals(p_rgh)
    #includeFunc streamlinesLine(funcName=streamlines, start=(0 0.5 0), end=(9 0.5 0), nPoints=24, U)
}


</file_content>
</file_end>

</directory_end>

<directory_begin>directory name: constant
<file_begin>file name: momentumTransport
<file_content>
FoamFile
{
    format      ascii;
    class       dictionary;
    location    "constant";
    object      momentumTransport;
}


simulationType laminar;

RAS
{
    model           kEpsilon;

    turbulence      on;

    printCoeffs     on;
}



</file_content>
</file_end>

<file_begin>file name: physicalProperties
<file_content>
FoamFile
{
    format      ascii;
    class       dictionary;
    location    "constant";
    object      physicalProperties;
}


thermoType
{
    type            heRhoThermo;
    mixture         pureMixture;
    transport       const;
    thermo          eConst;
    equationOfState Boussinesq;
    specie          specie;
    energy          sensibleInternalEnergy;
}

mixture
{
    specie
    {
        molWeight       18;
    }
    equationOfState
    {
        rho0            1;
        T0              300;
        beta            1e-03;
    }
    thermodynamics
    {
        Cv              712;
        Hf              0;
    }
    transport
    {
        mu              1e-03;
        Pr              1;
    }
}



</file_content>
</file_end>

<file_begin>file name: g
<file_content>
FoamFile
{
    format      ascii;
    class       uniformDimensionedVectorField;
    location    "constant";
    object      g;
}


dimensions      [0 1 -2 0 0 0 0];
value           (0 -9.81 0);



</file_content>
</file_end>

</directory_end>

</tutorials></similar_case_reference>
Similar case reference is always correct. If you find the user requirement is very consistent with the similar case reference, you should use the similar case reference as the template to generate the file.Just modify the necessary parts to make the file complete and functional.Please ensure that the generated file is complete, functional, and logically sound.Additionally, apply your domain expertise to verify that all numerical values are consistent with the user's requirements, maintaining accuracy and coherence.