User requirement: do a laminar, compressible flow over a forward-facing step using the rhoCentralFoam solver. Boundary conditions include a fixed velocity of 3m/s and temperature of 1 K at the inlet and slip conditions on the obstacle. Use timestep of 0.002 and output every 0.1. Finaltime is 4.
Refer to the following similar case file content to ensure the generated file aligns with the user requirement:
<similar_case_reference><index>
case name: forwardStep
case domain: compressible
case category: None
case solver: rhoCentralFoam
</index>


<directory_structure>
<dir>directory name: 0. File names in this directory: [U, p, T]</dir>
<dir>directory name: system. File names in this directory: [fvSolution, blockMeshDict, fvSchemes, controlDict]</dir>
<dir>directory name: constant. File names in this directory: [momentumTransport, physicalProperties]</dir>
</directory_structure>


<tutorials>
<directory_begin>directory name: 0
<file_begin>file name: U
<file_content>
FoamFile
{
    format      ascii;
    class       volVectorField;
    object      U;
}


dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (3 0 0);

boundaryField
{
    inlet
    {
        type            fixedValue;
        value           uniform (3 0 0);
    }

    outlet
    {
        type            inletOutlet;
        inletValue      uniform (3 0 0);
        value           uniform (3 0 0);
    }

    bottom
    {
        type            symmetryPlane;
    }

    top
    {
        type            symmetryPlane;
    }

    obstacle
    {
        type            slip;
    }

    defaultFaces
    {
        type            empty;
    }
}


</file_content>
</file_end>

<file_begin>file name: p
<file_content>
FoamFile
{
    format      ascii;
    class       volScalarField;
    object      p;
}


dimensions      [1 -1 -2 0 0 0 0];

internalField   uniform 1;

boundaryField
{
    inlet
    {
        type            fixedValue;
        value           uniform 1;
    }

    outlet
    {
        type            zeroGradient;
    }

    bottom
    {
        type            symmetryPlane;
    }

    top
    {
        type            symmetryPlane;
    }

    obstacle
    {
        type            zeroGradient;
    }

    defaultFaces
    {
        type            empty;
    }
}


</file_content>
</file_end>

<file_begin>file name: T
<file_content>
FoamFile
{
    format      ascii;
    class       volScalarField;
    object      T;
}


dimensions      [0 0 0 1 0 0 0];

internalField   uniform 1;

boundaryField
{
    inlet
    {
        type            fixedValue;
        value           uniform 1;
    }

    outlet
    {
        type            inletOutlet;
        inletValue      uniform 1;
        value           uniform 1;
    }

    bottom
    {
        type            symmetryPlane;
    }

    top
    {
        type            symmetryPlane;
    }

    obstacle
    {
        type            zeroGradient;
    }

    defaultFaces
    {
        type            empty;
    }
}


</file_content>
</file_end>

</directory_end>

<directory_begin>directory name: system
<file_begin>file name: fvSolution
<file_content>
FoamFile
{
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSolution;
}


solvers
{
    "(rho|rhoU|rhoE)"
    {
        solver          diagonal;
    }

    U
    {
        solver          smoothSolver;
        smoother        GaussSeidel;
        nSweeps         2;
        tolerance       1e-09;
        relTol          0.01;
    }

    h
    {
        $U;
        tolerance       1e-10;
        relTol          0;
    }
}



</file_content>
</file_end>

<file_begin>file name: blockMeshDict
<file_content>
FoamFile
{
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}


convertToMeters 1;

vertices
(
    (0 0 -0.05)
    (0.6 0 -0.05)
    (0 0.2 -0.05)
    (0.6 0.2 -0.05)
    (3 0.2 -0.05)
    (0 1 -0.05)
    (0.6 1 -0.05)
    (3 1 -0.05)
    (0 0 0.05)
    (0.6 0 0.05)
    (0 0.2 0.05)
    (0.6 0.2 0.05)
    (3 0.2 0.05)
    (0 1 0.05)
    (0.6 1 0.05)
    (3 1 0.05)
);

blocks
(
    hex (0 1 3 2 8 9 11 10) (48 16 1) simpleGrading (1 1 1)
    hex (2 3 6 5 10 11 14 13) (48 64 1) simpleGrading (1 1 1)
    hex (3 4 7 6 11 12 15 14) (192 64 1) simpleGrading (1 1 1)
);

defaultPatch
{
    type empty;
}

boundary
(
    inlet
    {
        type patch;
        faces
        (
            (0 8 10 2)
            (2 10 13 5)
        );
    }
    outlet
    {
        type patch;
        faces
        (
            (4 7 15 12)
        );
    }
    bottom
    {
        type symmetryPlane;
        faces
        (
            (0 1 9 8)
        );
    }
    top
    {
        type symmetryPlane;
        faces
        (
            (5 13 14 6)
            (6 14 15 7)
        );
    }
    obstacle
    {
        type patch;
        faces
        (
            (1 3 11 9)
            (3 4 12 11)
        );
    }
);



</file_content>
</file_end>

<file_begin>file name: fvSchemes
<file_content>
FoamFile
{
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}


fluxScheme      Kurganov;

ddtSchemes
{
    default         Euler;
}

gradSchemes
{
    default         Gauss linear;
}

divSchemes
{
    default         none;
    div(tauMC)      Gauss linear;
}

laplacianSchemes
{
    default         Gauss linear corrected;
}

interpolationSchemes
{
    default         linear;
    reconstruct(rho) vanLeer;
    reconstruct(U)  vanLeerV;
    reconstruct(T)  vanLeer;
}

snGradSchemes
{
    default         corrected;
}



</file_content>
</file_end>

<file_begin>file name: controlDict
<file_content>
FoamFile
{
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}


application     rhoCentralFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         4;

deltaT          0.002;

writeControl    adjustableRunTime;

writeInterval   0.1;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;

adjustTimeStep  yes;

maxCo           0.2;

maxDeltaT       1;



</file_content>
</file_end>

</directory_end>

<directory_begin>directory name: constant
<file_begin>file name: momentumTransport
<file_content>
FoamFile
{
    format      ascii;
    class       dictionary;
    location    "constant";
    object      momentumTransport;
}


simulationType  laminar;



</file_content>
</file_end>

<file_begin>file name: physicalProperties
<file_content>
FoamFile
{
    format      ascii;
    class       dictionary;
    location    "constant";
    object      physicalProperties;
}


thermoType
{
    type            hePsiThermo;
    mixture         pureMixture;
    transport       const;
    thermo          hConst;
    equationOfState perfectGas;
    specie          specie;
    energy          sensibleInternalEnergy;
}




mixture
{
    specie
    {
        molWeight       11640.3;
    }
    thermodynamics
    {
        Cp              2.5;
        Hf              0;
    }
    transport
    {
        mu              0;
        Pr              1;
    }
}



</file_content>
</file_end>

</directory_end>

</tutorials></similar_case_reference>
Similar case reference is always correct. If you find the user requirement is very consistent with the similar case reference, you should use the similar case reference as the template to generate the file.Just modify the necessary parts to make the file complete and functional.Please ensure that the generated file is complete, functional, and logically sound.Additionally, apply your domain expertise to verify that all numerical values are consistent with the user's requirements, maintaining accuracy and coherence.